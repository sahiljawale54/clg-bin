// AccessManagement.tsx
import React, { useState, useEffect } from 'react';
import { Card } from 'primereact/card';
import { InputText } from 'primereact/inputtext';
import { Button } from 'primereact/button';
import AccessPanel from './AccessPanel';
import './styles/App.css';

interface Access {
  id: string;
  name: string;
  selected: boolean;
}

interface SystemAccess {
  systemName: string;
  accesses: Access[];
  textValue?: string;
  validTo?: Date | null;
}

const AccessManagement: React.FC = () => {
  const [currentEmpId, setCurrentEmpId] = useState<string>('');
  const [cloneEmpId, setCloneEmpId] = useState<string>('');
  const [accessList, setAccessList] = useState<SystemAccess[]>([]);

  // Example data - replace this with your API call or data fetching logic
  const fetchAccessList = (id: string): SystemAccess[] => {
    return [
      {
        systemName: 'Capture',
        accesses: [
          { id: '1', name: 'Access A', selected: false },
          { id: '2', name: 'Access B', selected: false },
        ],
      },
      {
        systemName: 'Manage',
        accesses: [
          { id: '3', name: 'Access C', selected: false },
          { id: '4', name: 'Access D', selected: false },
        ],
      },
    ];
  };

  useEffect(() => {
    if (cloneEmpId) {
      const data = fetchAccessList(cloneEmpId);
      setAccessList(data);
    }
  }, [cloneEmpId]);

  const handleSelectAll = (systemName: string) => {
    setAccessList(prevList =>
      prevList.map(system =>
        system.systemName === systemName
          ? {
              ...system,
              accesses: system.accesses.map(access => ({
                ...access,
                selected: !system.accesses.every(a => a.selected),
              })),
            }
          : system
      )
    );
  };

  const handleCheckboxChange = (systemName: string, accessId: string) => {
    setAccessList(prevList =>
      prevList.map(system =>
        system.systemName === systemName
          ? {
              ...system,
              accesses: system.accesses.map(access =>
                access.id === accessId
                  ? { ...access, selected: !access.selected }
                  : access
              ),
            }
          : system
      )
    );
  };

  const handleTextChange = (systemName: string, value: string) => {
    setAccessList(prevList =>
      prevList.map(system =>
        system.systemName === systemName
          ? { ...system, textValue: value }
          : system
      )
    );
  };

  const handleDateChange = (systemName: string, date: Date | null) => {
    setAccessList(prevList =>
      prevList.map(system =>
        system.systemName === systemName
          ? { ...system, validTo: date }
          : system
      )
    );
  };

  const handleSubmit = () => {
    // Collect and format data as JSON
    const result = {
      currentEmpId,
      cloneEmpId,
      systems: accessList.map(system => ({
        systemName: system.systemName,
        accesses: system.accesses.map(access => ({
          id: access.id,
          name: access.name,
          selected: access.selected,
        })),
        textValue: system.textValue || '',
        validTo: system.validTo ? system.validTo.toISOString().split('T')[0] : null,
      })),
    };

    console.log('Result JSON:', JSON.stringify(result, null, 2));
    // You can also return the result or send it to a server here
  };

  return (
    <div className="p-grid p-fluid p-justify-center">
      <div className="p-col-12 p-md-8 p-lg-6">
        <Card title="Employee Access Management">
          {/* Current Employee ID Input */}
          <div className="p-field">
            <label htmlFor="currentEmpId">Current Employee ID:</label>
            <InputText
              id="currentEmpId"
              value={currentEmpId}
              onChange={e => setCurrentEmpId(e.target.value)}
              className="p-inputtext-lg"
              placeholder="Current Employee ID"
            />
          </div>

          {/* Clone Employee ID Input */}
          <div className="p-field">
            <label htmlFor="cloneEmpId">Clone Employee ID:</label>
            <InputText
              id="cloneEmpId"
              value={cloneEmpId}
              onChange={e => setCloneEmpId(e.target.value)}
              className="p-inputtext-lg"
              placeholder="Clone Employee ID"
            />
          </div>

          {/* Render Access Panels */}
          {accessList.map(system => (
            <AccessPanel
              key={system.systemName}
              system={system}
              handleSelectAll={handleSelectAll}
              handleCheckboxChange={handleCheckboxChange}
              handleTextChange={handleTextChange}
              handleDateChange={handleDateChange}
            />
          ))}

          {/* Submit Button */}
          <Button label="Submit" className="p-mt-4 p-button-success" onClick={handleSubmit} />
        </Card>
      </div>
    </div>
  );
};

export default AccessManagement;
